COPY BY VALUE:

"Copy by value" denotes that the value of a specific variable is directly copied to the other variable as such a copy of the value is created and assigned to the copied variable. "Copy by value" concept applies only to primitive datatypes like text, number and boolean.

Example: (program in JS)
var a = 5;
var b = a;
var a = 10;
console.log(a, b);

Output: 10 5

In the above example, the value of variable "a" is initialized to 5 and copied to variable "b". Now the value of "a" is changed to 10. Here the value of "a" will be copied as a seperate memory to "b" and so
changing the value of variable "a" will not affect the value of variable "b". This is called "copy by value".

COPY BY REFERENCE:

"Copy by reference" denotes that the value of a specific variable is copied to the other variable in reference to the same memory address. "Copy by reference" concept applies only to composite datatypes like array and object.

Example: (program in JS)
var arr1 = [1, 2, 3];
var arr2 = arr1;
arr1[0] = 4;
console.log(arr1);
console.log(arr2);

Output: [4, 2, 3]
        [4, 2, 3]

In the above example, a variable "arr1" is initialized with an array of [1, 2, 3] and copied to another variable "arr2". Now the first value of "arr1" is changed. Here when "arr1" is assigned to "arr2", only a reference to the
same memory address of "arr1" values will be assigned to "arr2" and not another set of same values will be created in memory. And so while changing one of the values of "arr1" will also be reflected in "arr2" since both refers
to the same memory address. This is called "copy by reference".

Refer the script file "copyByValueAndReferenceScript.js" in the same repository for more examples for both "Copy by value" and "Copy by reference".
